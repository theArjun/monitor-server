{"version":3,"sources":["components/SendCommand.js","components/Slider.js","components/SelectClient.js","components/Hero.js","App.js","serviceWorker.js","index.js"],"names":["socket","socketIOClient","SendCommand","React","memo","props","useState","search","setSearch","globalCommand","query","setQuery","output","setOutput","error","setError","returnCode","setReturnCode","returnCodeMeaning","setReturnCodeMeaning","executionTimeStamp","setExecutionTimeStamp","showCommandExecutionMetaData","setShowCommandExecutionMetaData","latestCommandSupplied","setLatestCommandSupplied","showBatchEfficiency","setShowBatchEfficiency","batchEfficiency","setBatchEfficiency","useEffect","on","commandOutput","JSON","parse","response","efficiency","console","log","session_ID","client_Session_ID","stdout","stderr","return_code","return_code_meaning","execution_timestamp","latest_command","commandToSend","client_ID","command","emit","returnCodeStyling","className","style","float","display","length","fontFamily","backgroundColor","class","onSubmit","event","preventDefault","type","placeholder","onChange","target","value","SampleNextArrow","onClick","background","SamplePrevArrow","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","accessibility","swipeToSlide","centerMode","centerPadding","nextArrow","prevArrow","slider","selectedClientsToSlider","selected_clients","map","item","key","SelectClients","selectedClients","setSelectedClients","userTypesGlobalCommand","setUserTypesGlobalCommand","setGlobalCommand","showGlobalCommandBox","setShowGlobalCommandBox","client_data","clients","push","Slider","title","columns","field","data","options","selection","actions","tooltip","icon","evt","hero","App","state","setState","Hero","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8XAIMA,G,OAASC,IADE,mDAgIFC,EA7HKC,IAAMC,MAAK,SAACC,GAAW,IAAD,EACZC,mBAAS,IADG,mBACjCC,EADiC,KACzBC,EADyB,OAEdF,mBAASD,EAAMI,eAFD,mBAEjCC,EAFiC,KAE1BC,EAF0B,OAGZL,mBAAS,IAHG,mBAGjCM,EAHiC,KAGzBC,EAHyB,OAIdP,mBAAS,IAJK,mBAIjCQ,EAJiC,KAI1BC,EAJ0B,OAKJT,mBAAS,IALL,mBAKjCU,EALiC,KAKrBC,EALqB,OAMUX,mBAAS,IANnB,mBAMjCY,EANiC,KAMdC,EANc,OAOYb,mBAAS,IAPrB,mBAOjCc,EAPiC,KAObC,EAPa,OAWpCf,oBAAS,GAX2B,mBAStCgB,EATsC,KAUtCC,EAVsC,OAYkBjB,mBAAS,IAZ3B,mBAYjCkB,EAZiC,KAYVC,EAZU,OAccnB,oBAAS,GAdvB,mBAcjCoB,EAdiC,KAcZC,EAdY,OAeMrB,oBAAU,GAfhB,mBAejCsB,EAfiC,KAehBC,EAfgB,KAiBxCC,qBAAU,WACRnB,EAASN,EAAMI,iBACd,CAACJ,EAAMI,gBAGVJ,EAAML,OAAO+B,GAAG,6BAA6B,SAACC,GAC5C,IAAMpB,EAASqB,KAAKC,MAAMF,GAAeG,SACzCN,EAAmBI,KAAKC,MAAMF,GAAeI,YAC7CT,GAAuB,GACvBU,QAAQC,IAAI1B,GAGRA,EAAO2B,aAAelC,EAAMmC,oBAC9B3B,EAAUD,EAAO6B,QACjB1B,EAASH,EAAO8B,QAChBzB,EAAcL,EAAO+B,aACrBxB,EAAqBP,EAAOgC,qBAC5BvB,EAAsBT,EAAOiC,qBAC7BpB,EAAyBb,EAAOkC,gBAChCvB,GAAgC,OAIpC,IAAIwB,EAAgB,CAClBC,UAAW3C,EAAMmC,kBACjBS,QAASvC,GAGXoB,qBAAU,WACR9B,EAAOkD,KAAK,mBAAoBH,KAC/B,CAACrC,IAEJ,IASMyC,EAAmC,IAAfnC,EAAmB,UAAY,aAEzD,OACE,yBAAKoC,UAAU,kBACb,6BAASA,UAAU,4DAEhB1B,EACC,0BAAM2B,MAAO,CAAEC,MAAO,UAAtB,wCACwC1B,GAEtC,KACJ,yBAAKwB,UAAU,SAAS/C,EAAM2C,WAC9B,yBAAKK,MAAO,CAAEE,QAAS,UACa,IAAjC/B,EAAsBgC,OACrB,yBAAKJ,UAAU,mBAAf,4BAC4B,IAC1B,0BAAMC,MAAO,CAAEI,WAAY,cACxBjC,IAGH,KACJ,yBAAK4B,UAAU,kBAAf,gBACgB/C,EAAMmC,oBAGxB,6BACClB,EACC,yBACE+B,MAAO,CAAEK,gBAAiBP,EAAmBI,QAAS,SACtDH,UAAU,uCAEV,yBAAKO,MAAM,eACR3C,EADH,iBACmBE,GAEnB,sDAA4BE,IAE5B,KACJ,6BACA,0BAAMwC,SA3CO,SAACC,GAClBA,EAAMC,iBACNnD,EAASJ,KA0CH,yBAAK6C,UAAU,gCACb,yBAAKA,UAAU,uBACb,2BACEA,UAAU,4BACVW,KAAK,OACLC,YAAY,qBACZC,SAtDO,SAACJ,GACpBrD,EAAUqD,EAAMK,OAAOC,WAwDf,yBAAKf,UAAU,WACb,4BAAQW,KAAK,SAASX,UAAU,qBAAhC,cAOLxC,EAAO4C,OAAS,EACf,yBAAKJ,UAAU,mCAAmCxC,GAChD,KACHE,EAAM0C,OAAS,EACd,yBAAKJ,UAAU,kCAAkCtC,GAC/C,UCxHZ,SAASsD,EAAgB/D,GAAQ,IACvB+C,EAA8B/C,EAA9B+C,UAAWC,EAAmBhD,EAAnBgD,MAAOgB,EAAYhE,EAAZgE,QAC1B,OACE,yBACEjB,UAAWA,EACXC,MAAK,eAAOA,EAAP,CAAcE,QAAS,QAASe,WAAY,YACjDD,QAASA,IAKf,SAASE,EAAgBlE,GAAQ,IACvB+C,EAA8B/C,EAA9B+C,UAAWC,EAAmBhD,EAAnBgD,MAAOgB,EAAYhE,EAAZgE,QAC1B,OACE,yBACEjB,UAAWA,EACXC,MAAK,eAAOA,EAAP,CAAcE,QAAS,QAASe,WAAY,YACjDD,QAASA,IAMf,IAAMG,EAAW,CACfC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,eAAe,EACfC,cAAc,EACdC,YAAY,EACZC,cAAe,MACfC,UAAW,kBAACf,EAAD,MACXgB,UAAW,kBAACb,EAAD,OAwBEc,EArBAlF,IAAMC,MAAK,SAACC,GACzB,IAAIiF,EAiBJ,OAhBAA,EACE,kBAAC,IAAWd,EACTnE,EAAMkF,iBAAiBC,KAAI,SAACC,GAC3B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKjD,kBACVQ,UAAWyC,EAAKzC,UAChBR,kBAAmBiD,EAAKjD,kBACxBxC,OAAQK,EAAML,OACdS,cAAeJ,EAAMI,oBAOxB,yBAAK2C,UAAU,IAAIkC,MCqBbK,EA9EOxF,IAAMC,MAAK,SAACC,GAAW,IAAD,EACIC,mBAAS,IADb,mBACnCsF,EADmC,KAClBC,EADkB,OAEkBvF,mBAAS,IAF3B,mBAEnCwF,EAFmC,KAEXC,EAFW,OAGAzF,qBAHA,mBAGnCG,EAHmC,KAGpBuF,EAHoB,OAIc1F,oBAAS,GAJvB,mBAInC2F,EAJmC,KAIbC,EAJa,KAMpCC,EAAc,GACpB9F,EAAM+F,QAAQZ,KAAI,SAACC,GACjBU,EAAYE,KAAZ,eAAsBZ,OAYxB,OACE,6BACE,kBAACa,EAAD,CACEf,iBAAkBK,EAClB5F,OAAQK,EAAML,OACdS,cAAeA,IAEhBwF,EACC,6BACE,0BAAMrC,SAdW,SAACC,GACxBA,EAAMC,iBACNkC,EAAiBF,KAaT,yBAAK1C,UAAU,gCACb,yBAAKA,UAAU,uBACb,2BACEA,UAAU,4BACVW,KAAK,OACLC,YAAY,kCACZC,SAzBM,SAACJ,GACrBkC,EAA0BlC,EAAMK,OAAOC,WA2B7B,yBAAKf,UAAU,WACb,4BAAQW,KAAK,SAASX,UAAU,qBAAhC,+BAMN,6BAAO,KAEP,KACJ,kBAAC,IAAD,CACEmD,MAAM,oBACNC,QAAS,CACP,CAAED,MAAO,OAAQE,MAAO,aACxB,CAAEF,MAAO,aAAcE,MAAO,qBAC9B,CAAEF,MAAO,kBAAmBE,MAAO,wBACnC,CAAEF,MAAO,aAAcE,MAAO,cAEhCC,KAAMP,EACNQ,QAAS,CACPC,WAAW,GAEbC,QAAS,CACP,CACEC,QAAS,+BACTC,KAAM,OACN1C,QAAS,SAAC2C,EAAKN,GACbb,EAAmBa,GACfA,EAAKlD,OAAS,GAChB0C,GAAwB,YCxDzBe,EAdF,WACX,OACE,6BAAS7D,UAAU,mBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,kBACA,wBAAIA,UAAU,YAAd,qDC6BK8D,E,kDA/Bb,WAAY7G,GAAQ,IAAD,8BACjB,cAAMA,IAED8G,MAAQ,CACXnH,OAAQC,IANG,2CAOXkC,SAAU,IAEZ,EAAKgF,MAAMnH,OAAOkD,KAAK,cAAe,kCACtC,EAAKiE,MAAMnH,OAAO+B,GAAG,2BAA2B,SAAC2E,GAC/C,EAAKU,SAAS,CAAEjF,SAAUuE,OATX,E,qDAcjB,OACE,6BACE,kBAACW,EAAD,MACA,yBAAKjE,UAAU,aACb,6BACA,kBAAC,EAAD,CACEgD,QAASkB,KAAKH,MAAMhF,SACpBnC,OAAQsH,KAAKH,MAAMnH,e,GAtBbuH,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1H,GACLuB,QAAQvB,MAAMA,EAAM2H,c","file":"static/js/main.8c523575.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./SendCommand.css\";\nconst ENDPOINT = \"https://commandingserver.herokuapp.com/command\";\nconst socket = socketIOClient(ENDPOINT); // socket declaration shall be at top.\n\nconst SendCommand = React.memo((props) => {\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(props.globalCommand);\n  const [output, setOutput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [returnCode, setReturnCode] = useState(\"\");\n  const [returnCodeMeaning, setReturnCodeMeaning] = useState(\"\");\n  const [executionTimeStamp, setExecutionTimeStamp] = useState(\"\");\n  const [\n    showCommandExecutionMetaData,\n    setShowCommandExecutionMetaData,\n  ] = useState(false);\n  const [latestCommandSupplied, setLatestCommandSupplied] = useState(\"\");\n\n  const [showBatchEfficiency, setShowBatchEfficiency] = useState(false);\n  const [batchEfficiency, setBatchEfficiency] = useState(-1);\n\n  useEffect(() => {\n    setQuery(props.globalCommand);\n  }, [props.globalCommand]);\n\n  let efficiency;\n  props.socket.on(\"output_from_client_to_web\", (commandOutput) => {\n    const output = JSON.parse(commandOutput).response;\n    setBatchEfficiency(JSON.parse(commandOutput).efficiency);\n    setShowBatchEfficiency(true);\n    console.log(output);\n\n    // Show output to respective clients.\n    if (output.session_ID === props.client_Session_ID) {\n      setOutput(output.stdout);\n      setError(output.stderr);\n      setReturnCode(output.return_code);\n      setReturnCodeMeaning(output.return_code_meaning);\n      setExecutionTimeStamp(output.execution_timestamp);\n      setLatestCommandSupplied(output.latest_command);\n      setShowCommandExecutionMetaData(true);\n    }\n  });\n\n  let commandToSend = {\n    client_ID: props.client_Session_ID,\n    command: query,\n  };\n\n  useEffect(() => {\n    socket.emit(\"command_from_web\", commandToSend);\n  }, [query]);\n\n  const updateSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const getCommand = (event) => {\n    event.preventDefault();\n    setQuery(search);\n  };\n\n  const returnCodeStyling = returnCode === 0 ? \"#00d1b2\" : \"lightcoral\";\n\n  return (\n    <div className=\"tile is-parent\">\n      <article className=\"tile is-child notification is-bordered has-text-centered\">\n        {/* SHOW BATCH EFFICIENCY */}\n        {showBatchEfficiency ? (\n          <span style={{ float: \"right\" }}>\n            Batch Command Execution Efficiency : {batchEfficiency}\n          </span>\n        ) : null}\n        <div className=\"title\">{props.client_ID}</div>\n        <div style={{ display: \"block\" }}>\n          {latestCommandSupplied.length !== 0 ? (\n            <div className=\"is-pulled-right\">\n              Latest Command Supplied :{\" \"}\n              <span style={{ fontFamily: \"monospace\" }}>\n                {latestCommandSupplied}\n              </span>\n            </div>\n          ) : null}\n          <div className=\"is-pulled-left\">\n            Session ID : {props.client_Session_ID}\n          </div>\n        </div>\n        <br />\n        {showCommandExecutionMetaData ? (\n          <div\n            style={{ backgroundColor: returnCodeStyling, display: \"block\" }}\n            className=\"output_metadata is-family-monospace\"\n          >\n            <div class=\"return_code\">\n              {returnCode} ▶️ {returnCodeMeaning}\n            </div>\n            <div>EXECUTION TIMESTAMP : {executionTimeStamp}</div>\n          </div>\n        ) : null}\n        <br />\n        <form onSubmit={getCommand}>\n          <div className=\"field has-addons is-centered\">\n            <div className=\"control is-expanded\">\n              <input\n                className=\"input is-family-monospace\"\n                type=\"text\"\n                placeholder=\"Enter command here\"\n                onChange={updateSearch}\n              />\n            </div>\n            <div className=\"control\">\n              <button type=\"submit\" className=\"button is-primary\">\n                Command\n              </button>\n            </div>\n          </div>\n        </form>\n\n        {output.length > 0 ? (\n          <div className=\"is-family-monospace disp output\">{output}</div>\n        ) : null}\n        {error.length > 0 ? (\n          <div className=\"is-family-monospace disp error\">{error}</div>\n        ) : null}\n      </article>\n    </div>\n  );\n});\n\nexport default SendCommand;\n","import React from \"react\";\nimport Slider from \"react-slick\";\n\nimport SendCommand from \"./SendCommand\";\n\nfunction SampleNextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style, display: \"block\", background: \"#00d1b2\" }}\n      onClick={onClick}\n    />\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style, display: \"block\", background: \"#00d1b2\" }}\n      onClick={onClick}\n    />\n  );\n}\n\n// Settings for Slider\nconst settings = {\n  dots: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  arrows: true,\n  accessibility: true,\n  swipeToSlide: true,\n  centerMode: true,\n  centerPadding: \"0px\",\n  nextArrow: <SampleNextArrow />,\n  prevArrow: <SamplePrevArrow />,\n};\n\nconst slider = React.memo((props) => {\n  let selectedClientsToSlider;\n  selectedClientsToSlider = (\n    <Slider {...settings}>\n      {props.selected_clients.map((item) => {\n        return (\n          <SendCommand\n            key={item.client_Session_ID}\n            client_ID={item.client_ID}\n            client_Session_ID={item.client_Session_ID}\n            socket={props.socket}\n            globalCommand={props.globalCommand}\n          />\n        );\n      })}\n    </Slider>\n  );\n\n  return <div className=\"\">{selectedClientsToSlider}</div>;\n});\n\nexport default slider;\n","import React, { useState, useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport Slider from \"./Slider\";\n\nconst SelectClients = React.memo((props) => {\n  const [selectedClients, setSelectedClients] = useState([]);\n  const [userTypesGlobalCommand, setUserTypesGlobalCommand] = useState(\"\");\n  const [globalCommand, setGlobalCommand] = useState();\n  const [showGlobalCommandBox, setShowGlobalCommandBox] = useState(false);\n\n  const client_data = [];\n  props.clients.map((item) => {\n    client_data.push({ ...item });\n  });\n\n  const updateCommand = (event) => {\n    setUserTypesGlobalCommand(event.target.value);\n  };\n\n  const getGlobalCommand = (event) => {\n    event.preventDefault();\n    setGlobalCommand(userTypesGlobalCommand);\n  };\n\n  return (\n    <div>\n      <Slider\n        selected_clients={selectedClients}\n        socket={props.socket}\n        globalCommand={globalCommand}\n      />\n      {showGlobalCommandBox ? (\n        <div>\n          <form onSubmit={getGlobalCommand}>\n            <div className=\"field has-addons is-centered\">\n              <div className=\"control is-expanded\">\n                <input\n                  className=\"input is-family-monospace\"\n                  type=\"text\"\n                  placeholder=\"Command to all selected clients\"\n                  onChange={updateCommand}\n                />\n              </div>\n              <div className=\"control\">\n                <button type=\"submit\" className=\"button is-primary\">\n                  Command Selected Clients\n                </button>\n              </div>\n            </div>\n          </form>\n          <br />{\" \"}\n        </div>\n      ) : null}\n      <MaterialTable\n        title=\"Connected Clients\"\n        columns={[\n          { title: \"Name\", field: \"client_ID\" },\n          { title: \"Session ID\", field: \"client_Session_ID\" },\n          { title: \"Connection Time\", field: \"connection_timestamp\" },\n          { title: \"IP Address\", field: \"client_IP\" },\n        ]}\n        data={client_data}\n        options={{\n          selection: true,\n        }}\n        actions={[\n          {\n            tooltip: \"Command all selected clients\",\n            icon: \"code\",\n            onClick: (evt, data) => {\n              setSelectedClients(data);\n              if (data.length > 1) {\n                setShowGlobalCommandBox(true);\n              }\n            },\n          },\n        ]}\n      />\n    </div>\n  );\n});\n\nexport default SelectClients;\n","import React from \"react\";\n\nconst hero = () => {\n  return (\n    <section className=\"hero is-primary\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">Monitor Server</h1>\n          <h2 className=\"subtitle\">\n            Monitors the connected clients with commands.\n          </h2>\n        </div>\n      </div>\n    </section>\n  );\n};\nexport default hero;\n","import React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport ActionsOnSelectedRows from \"./components/SelectClient\";\nimport Hero from \"./components/Hero\";\nconst ENDPOINT = \"https://commandingserver.herokuapp.com/\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: socketIOClient(ENDPOINT),\n      response: [],\n    };\n    this.state.socket.emit(\"populate_me\", \"Some Message is required here.\");\n    this.state.socket.on(\"update_connections_list\", (data) => {\n      this.setState({ response: data });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Hero />\n        <div className=\"container\">\n          <br />\n          <ActionsOnSelectedRows\n            clients={this.state.response}\n            socket={this.state.socket}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // TODO Reloading response issue OPTIMIZATION too much reloading\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}